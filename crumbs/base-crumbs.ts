import path from "path";
import fs from 'fs';
import { CrumbOutput, getCrumbFileName } from "../src/server/routes/client-files";

/**
 * 
 * @param loadBaseCrumbs 
 * @param getCrumbsOutput 
 * @param applyChanges 
 * @param createCrumbs 
 * @param crumbsPath 
 */
export async function generateCrumbFiles<CrumbPatch>(
  loadBaseCrumbs: () => Promise<string>,
  getCrumbsOutput: () => CrumbOutput<CrumbPatch>,
  applyChanges: (content: string, changes: Partial<CrumbPatch>) =>string,
  createCrumbs: (path: string, file: string) => Promise<void>,
  crumbsPath: string
): Promise<void> {
  (async () => {
    const baseCrumbs = await loadBaseCrumbs();
    const { hash, crumbs } = getCrumbsOutput();
    const crumbFiles = crumbs.map((crumb) => {
      return {
        id: crumb.id,
        content: applyChanges(baseCrumbs, crumb.out)
      }
    });
    const autoGeneratedDir = path.join(__dirname, '..', 'media', crumbsPath);
    if (!fs.existsSync(autoGeneratedDir)) {
      fs.mkdirSync(autoGeneratedDir, { recursive: true });
    }
  
    // deleting previous files
    const filesInFolder = fs.readdirSync(autoGeneratedDir);
    filesInFolder.forEach((file) => {
      if (file.endsWith('.swf')) {
        fs.unlinkSync(path.join(autoGeneratedDir, file));
      }
    });
  
    let promises: Promise<any>[] = [];
  
    for (const crumbfile of crumbFiles) {
      if (promises.length > 16) {
        await Promise.all(promises);
        promises = [];
      }
      promises.push(createCrumbs(path.join(autoGeneratedDir, getCrumbFileName(hash, crumbfile.id)), crumbfile.content));
    }
  })();
}